{
  "_args": [
    [
      {
        "raw": "multiaddr@^1.0.0",
        "scope": null,
        "escapedName": "multiaddr",
        "name": "multiaddr",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/home/auxesis/Documents/test/ipfsapp/node_modules/ipfs-api"
    ]
  ],
  "_from": "multiaddr@>=1.0.0 <2.0.0",
  "_id": "multiaddr@1.4.1",
  "_inCache": true,
  "_location": "/multiaddr",
  "_nodeVersion": "4.4.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/multiaddr-1.4.1.tgz_1461152148455_0.09550736960954964"
  },
  "_npmUser": {
    "name": "daviddias",
    "email": "daviddias.p@gmail.com"
  },
  "_npmVersion": "3.8.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "multiaddr@^1.0.0",
    "scope": null,
    "escapedName": "multiaddr",
    "name": "multiaddr",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/ipfs-api"
  ],
  "_resolved": "https://registry.npmjs.org/multiaddr/-/multiaddr-1.4.1.tgz",
  "_shasum": "328ee550b9e176e02dd105b0d8f4df90377be611",
  "_shrinkwrap": null,
  "_spec": "multiaddr@^1.0.0",
  "_where": "/home/auxesis/Documents/test/ipfsapp/node_modules/ipfs-api",
  "author": {
    "name": "Juan Benet",
    "email": "juan@benet.ai",
    "url": "http://juan.benet.ai/"
  },
  "bugs": {
    "url": "https://github.com/jbenet/js-multiaddr/issues"
  },
  "contributors": [
    {
      "name": "David Dias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "Juan Batiz-Benet",
      "email": "juan@benet.ai"
    },
    {
      "name": "Stephen Whitmore",
      "email": "stephen.whitmore@gmail.com"
    },
    {
      "name": "dignifiedquire",
      "email": "dignifiedquire@gmail.com"
    }
  ],
  "dependencies": {
    "babel-runtime": "^6.6.1",
    "bs58": "^3.0.0",
    "ip": "^1.0.2",
    "lodash.filter": "^4.2.1",
    "lodash.map": "^4.2.1",
    "varint": "^4.0.0",
    "xtend": "^4.0.1"
  },
  "description": "multiaddr implementation (binary + string representation of network addresses)",
  "devDependencies": {
    "aegir": "^2.1.1",
    "buffer-loader": "0.0.1",
    "chai": "^3.5.0",
    "pre-commit": "^1.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "328ee550b9e176e02dd105b0d8f4df90377be611",
    "tarball": "https://registry.npmjs.org/multiaddr/-/multiaddr-1.4.1.tgz"
  },
  "gitHead": "7dabdf329ede975383bda0530581ed217cf686ce",
  "homepage": "https://github.com/jbenet/js-multiaddr",
  "jsnext:main": "src/index.js",
  "keywords": [
    "multiaddr",
    "binary",
    "string"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "daviddias",
      "email": "daviddias.p@gmail.com"
    },
    {
      "name": "jbenet",
      "email": "juan@benet.ai"
    }
  ],
  "name": "multiaddr",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "js-multiaddr\n============\n\n[![](https://img.shields.io/badge/made%20by-Protocol%20Labs-blue.svg?style=flat-square)](http://ipn.io)\n[![](https://img.shields.io/badge/project-IPFS-blue.svg?style=flat-square)](http://ipfs.io/)\n[![](https://img.shields.io/badge/freenode-%23ipfs-blue.svg?style=flat-square)](http://webchat.freenode.net/?channels=%23ipfs)\n[![Coverage Status](https://coveralls.io/repos/github/jbenet/js-multiaddr/badge.svg?branch=master)](https://coveralls.io/github/jbenet/js-multiaddr?branch=master)\n[![Travis CI](https://travis-ci.org/jbenet/js-multiaddr.svg?branch=master)](https://travis-ci.org/jbenet/js-multiaddr)\n[![Circle CI](https://circleci.com/gh/jbenet/js-multiaddr.svg?style=svg)](https://circleci.com/gh/jbenet/js-multiaddr)\n[![Dependency Status](https://david-dm.org/jbenet/js-multiaddr.svg?style=flat-square)](https://david-dm.org/jbenet/js-multiaddr) [![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat-square)](https://github.com/feross/standard)\n\n> JavaScript implementation of [multiaddr](https://github.com/jbenet/multiaddr).\n\n## What is multiaddr?\n\nA standard way to represent addresses that\n\n- support any standard network protocol\n- are self-describing\n- have a binary packed format\n- have a nice string representation\n- encapsulate well\n\n## Example\n\n```js\n$ node\n\n> const multiaddr = require('multiaddr')\n\n> const addr = multiaddr(\"/ip4/127.0.0.1/udp/1234\")\n<Multiaddr /ip4/127.0.0.1/udp/1234>\n\n> addr.buffer\n<Buffer 04 7f 00 00 01 11 04 d2>\n\n> addr.toString()\n'/ip4/127.0.0.1/udp/1234'\n\n> addr.protos()\n[\n  {code: 4, name: 'ip4', size: 32},\n  {code: 17, name: 'udp', size: 16}\n]\n\n> addr.nodeAddress()\n{\n  family: \"IPv4\",\n  port: 1234,\n  address: \"127.0.0.1\"\n}\n\n> addr.encapsulate('/sctp/5678')\n<Multiaddr /ip4/127.0.0.1/udp/1234/sctp/5678>\n```\n\n## API\n\n```js\nconst multiaddr = require('multiaddr')\n```\n\n### Create\n\n#### const addr = multiaddr(str)\n\nCreates a multiaddress from a string (e.g. `/ip4/127.0.0.1/udp/1234`).\n\n#### const addr = multiaddr(buf)\n\nCreates a multiaddress from another multiaddress' raw bytes.\n\n#### addr.buffer\n\nThe raw bytes representing this multiaddress.\n\n#### addr.toString()\n\nThe multiaddress in string format (e.g. `/ip4/127.0.0.1/udp/1234`).\n\n### Protocols\n\n#### addr.protoCodes()\n\nReturns the codes of the protocols in the multiaddress, in left-to-right order.\n\n```js\naddr.protoCodes()\n// [4, 6]\n```\n\n#### addr.protoNames()\n\nReturns the names of the protocols in the multiaddress, in left-to-right order.\n\n```js\naddr.protoNames()\n// ['ip4', 'tcp']\n```\n\n#### addr.protos()\n\nReturns description objects of the protocols in the multiaddress, in left-to-right order.\n\n```js\naddr.protos()\n// [\n//   { code: 4, name: 'ip4', size: 32},\n//   { code: 17, name: 'udp', size: 16}\n// ]\n```\n\nEach object contains the protocol code, protocol name, and the size of its\naddress space in bits.\n\n### Node-Friendly Addresses\n\nUtility functions for getting NodeJS-friendly address information from a\nmultiaddress.\n\n#### addr.nodeAddress()\n\nReturns a NodeJS-friendly object describing the left-most address in the\nmultiaddress.\n\n```js\naddr.nodeAddress()\n// { family: \"IPv4\", port:1234, address: \"127.0.0.1\" }\n```\n\nNote that protocol information is left out: in Node (and most network systems)\nthe protocol is unknowable given only the address.\n\n#### addr.fromNodeAddress(addr)\n\nConstructs a multiaddress, given a NodeJS-friendly address object and a protocol.\n\n```js\naddr.fromNodeAddress({family: \"IPv4\", port:1234, address: \"127.0.0.1\"}, 'udp')\n// <Multiaddr /ip4/127.0.0.1/udp/1234>\n```\n\n#### addr.fromStupidString(str)\n\nReturns a multiaddress, given a URI in the format `<proto><IPv>://<IP\nAddr>[:<proto port>]`\n\n```js\naddr = multiaddr.fromStupidString(\"udp4://127.0.0.1:1234\")\n// <Multiaddr /ip4/127.0.0.1/udp/1234>\n```\n\n*NOT IMPLEMENTED*\n\n#### addr.toStupidString()\n\n*NOT IMPLEMENTED*\n\n### En/decapsulate\n\n#### addr.encapsulate(str)\n\nReturns a new multiaddress that encapsulates `addr` in a new protocol string,\n`str`.\n\n```js\naddr.encapsulate('/sctp/5678')\n// <Multiaddr /ip4/127.0.0.1/udp/1234/sctp/5678>\n```\n\n#### addr.decapsulate(str)\n\nReturns a new multiaddress with the right-most protocol string `str` removed.\n\n```js\nmultiaddress('/ip4/127.0.0.1/udp/1234').decapsulate('/udp')\n// <Multiaddr /ip4/127.0.0.1>\n```\n\n### Tunneling\n\nGiven these encapsulation/decapsulate tools, multiaddresses lend\nthemselves to expressing tunnels very nicely:\n\n```js\nconst printer = multiaddr('/ip4/192.168.0.13/tcp/80')\n\nconst proxy = multiaddr('/ip4/10.20.30.40/tcp/443')\n\nconst printerOverProxy = proxy.encapsulate(printer)\n// <Multiaddr /ip4/10.20.30.40/tcp/443/ip4/192.168.0.13/tcp/80>\n```\n\n## Installation\n\n### npm\n\n```sh\n> npm i multiaddr\n```\n\n## Setup\n\n### Node.js\n\n```js\nconst multiaddr = require('multiaddr')\n```\n\n### Browser: Browserify, Webpack, other bundlers\n\nThe code published to npm that gets loaded on require is in fact a ES5\ntranspiled version with the right shims added. This means that you can require\nit and use with your favourite bundler without having to adjust asset management\nprocess.\n\n```js\nconst multiaddr = require('multiaddr')\n```\n\n### Browser: `<script>` Tag\n\nLoading this module through a script tag will make the `Multiaddr` obj available in\nthe global namespace.\n\n```html\n<script src=\"https://npmcdn.com/multiaddr/dist/index.min.js\"></script>\n<!-- OR -->\n<script src=\"https://npmcdn.com/multiaddr/dist/index.js\"></script>\n```\n\n**NOTE**: You will need access to the Node.js `Buffer` API. If you are running\nin the browser, you can access it with `multiaddr.Buffer` or you can install\n[feross/buffer](https://github.com/feross/buffer).\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jbenet/js-multiaddr.git"
  },
  "scripts": {
    "build": "aegir-build",
    "coverage": "aegir-coverage",
    "coverage-publish": "aegir-coverage publish",
    "lint": "aegir-lint",
    "release": "aegir-release",
    "release-major": "aegir-release major",
    "release-minor": "aegir-release minor",
    "test": "aegir-test",
    "test:browser": "aegir-test browser",
    "test:node": "aegir-test node"
  },
  "version": "1.4.1"
}
