{
  "_args": [
    [
      {
        "raw": "varint@^4.0.0",
        "scope": null,
        "escapedName": "varint",
        "name": "varint",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/home/auxesis/Documents/test/ipfsapp/node_modules/multiaddr"
    ]
  ],
  "_from": "varint@>=4.0.0 <5.0.0",
  "_id": "varint@4.0.1",
  "_inCache": true,
  "_location": "/varint",
  "_nodeVersion": "5.4.1",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/varint-4.0.1.tgz_1466277427894_0.5399024342186749"
  },
  "_npmUser": {
    "name": "chrisdickinson",
    "email": "chris@neversaw.us"
  },
  "_npmVersion": "3.8.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "varint@^4.0.0",
    "scope": null,
    "escapedName": "varint",
    "name": "varint",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/multiaddr"
  ],
  "_resolved": "https://registry.npmjs.org/varint/-/varint-4.0.1.tgz",
  "_shasum": "490829b942d248463b2b35097995c3bf737198e9",
  "_shrinkwrap": null,
  "_spec": "varint@^4.0.0",
  "_where": "/home/auxesis/Documents/test/ipfsapp/node_modules/multiaddr",
  "author": {
    "name": "Chris Dickinson",
    "email": "chris@neversaw.us"
  },
  "bugs": {
    "url": "https://github.com/chrisdickinson/varint/issues"
  },
  "dependencies": {},
  "description": "protobuf-style varint bytes - use msb to create integer values of varying sizes",
  "devDependencies": {
    "tape": "~2.12.3"
  },
  "directories": {},
  "dist": {
    "shasum": "490829b942d248463b2b35097995c3bf737198e9",
    "tarball": "https://registry.npmjs.org/varint/-/varint-4.0.1.tgz"
  },
  "gitHead": "a260948535e5b24a7e4562e3b8c690e2cc426aff",
  "homepage": "https://github.com/chrisdickinson/varint#readme",
  "keywords": [
    "varint",
    "protobuf",
    "encode",
    "decode"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "chrisdickinson",
      "email": "chris@neversaw.us"
    }
  ],
  "name": "varint",
  "optionalDependencies": {},
  "readme": "# varint\n\nencode whole numbers to an array of [protobuf-style varint bytes](https://developers.google.com/protocol-buffers/docs/encoding#varints) and also decode them.\n\n```javascript\nvar varint = require('varint')\n\nvar bytes = varint.encode(300) // === [0xAC, 0x02]\nvarint.decode(bytes) // 300\nvarint.decode.bytes // 2 (the last decode() call required 2 bytes)\n```\n\n## api\n\n### varint = require('varint')\n\n### varint.encode(num[, buffer=[], offset=0]) -> buffer\n\nEncodes `num` into `buffer` starting at `offset`. returns `buffer`, with the encoded varint written into it. If `buffer` is not provided, it will default to a new array.\n\n`varint.encode.bytes` will now be set to the number of bytes\nmodified.\n\n### varint.decode(data[, offset=0]) -> number\n\ndecodes `data`, which can be either a buffer or array of integers, from position `offset` or default 0 and returns the decoded original integer.\n\n### varint.decode.bytes\n\nif you also require the length (number of bytes) that were required to decode the integer you can access it via `varint.decode.bytes`. this is an integer property that will tell you the number of bytes that the last .decode() call had to use to decode.\n\n### varint.encode.bytes\n\nsimilar to `decode.bytes` when encoding a number it can be useful to know how many bytes where written (especially if you pass an output array). you can access this via `varint.encode.bytes` which holds the number of bytes written in the last encode.\n\n\n### varint.encodingLength(num)\n\nreturns the number of bytes this number will be encoded as, up to a maximum of 8.\n\n## usage notes\n\nIf varint is passed a buffer that does not contain a valid end\nbyte, then `decode` will return undefined, and `decode.bytes` \nwill be set to 0. If you are reading from a streaming source,\nit's okay to pass an incomplete buffer into `decode`, detect this\ncase, and then concatenate the next buffer.\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/chrisdickinson/varint.git"
  },
  "scripts": {
    "test": "node test.js"
  },
  "version": "4.0.1"
}
